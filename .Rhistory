library (caret)
library (carot)
library (markdown)
install.packages("markdown")
install.packages("RWeka")
install.packages("caret")
data <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
View(data)
View(data)
install.packages("knitr")
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
data <- read.csv("pml-training.csv",  na.strings = "NA", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv",  na.strings = "NA",  stringsAsFactors = FALSE)
View(data)
columns <- c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt",
"gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y",
"accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm",
"pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y",
"gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x",
"magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell",
"total_accel_dumbbell", "gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z",
"accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x",
"magnet_dumbbell_y", "magnet_dumbbell_z", "roll_forearm", "pitch_forearm",
"yaw_forearm", "total_accel_forearm", "gyros_forearm_x", "gyros_forearm_y",
"gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z",
"magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")
training <- data [, c(columns, "classe"]
training <- data [, c(columns, "classe")]
corr <- cor(training[, columns])
View(corr)
View(corr)
correlation <- cor(training[, columns])
pal <- colorRampPalette(c("white", "red"))(n = 199)
heatmap(correlation, col = pal)
palette <- colorRampPalette(c("blue", "red"))(n = 199)
heatmap(correlation, col = pal)
heatmap(correlation, col = palette)
heatmap(correlation, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
heatmap(correlation, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column")
heatmap(correlation, Rowv=NA, Colv=NA, col = cool.colors(256), scale="column")
palette <- colorRampPalette(c("blue", "yellow"), space = "rgb")
levelplot(correlation, xlab="", ylab="", col.regions=palette(120), cuts=100, at=seq(0,1,0.01))
install.packages("levelplot")
levelplot(correlation, xlab="", ylab="", col.regions=palette(120), cuts=100, at=seq(0,1,0.01))
library(lattice)
levelplot(correlation, xlab="", ylab="", col.regions=palette(120), cuts=100, at=seq(0,1,0.01))
levelplot(correlation,
main="Correlation Level Plot", xlab="",ylab="",aspect=1,
col.regions=palette(120), pretty=TRUE,
cuts=100, at=seq(0,1,0.01),
scales=list(x=list(rot=90)) )
which(abs(correlation) > 0.90 & abs(correlation) != 1)
which(abs(correlation) > 0.90 & abs(correlation) < 1)
correlation["roll_belt", "total_accel_belt"]
colums <- columns [-"roll_belt"]
colums <- columns [-1]
columns <- columns [-1]
columns <- c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x",
"magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm",
"gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z",
"magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell",
"yaw_dumbbell", "total_accel_dumbbell", "gyros_dumbbell_x", "gyros_dumbbell_y",
"gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z",
"magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z", "roll_forearm",
"pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x", "gyros_forearm_y",
"gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z", "magnet_forearm_x",
"magnet_forearm_y", "magnet_forearm_z")
columns <- columns [-c("roll_belt")]
columns <- columns [,-c("roll_belt")]
columns <- columns [-c("roll_belt")]
c("roll_belt")
columns <- columns [-index(c("roll_belt"))]
columns <- columns [!names(columns) %in% c("roll_belt")]
columns <- c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x",
"magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm",
"gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z",
"magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell",
"yaw_dumbbell", "total_accel_dumbbell", "gyros_dumbbell_x", "gyros_dumbbell_y",
"gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z",
"magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z", "roll_forearm",
"pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x", "gyros_forearm_y",
"gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z", "magnet_forearm_x",
"magnet_forearm_y", "magnet_forearm_z")
columns <- columns [!columns %in% c("roll_belt")]
training <- data [, c(columns, "classe")]
install.packages("caret")
control <- trainControl(method = "none")
grid <- data.frame(interaction.depth = 4, n.trees = 300, shrinkage = 0.1)
View(grid)
View(grid)
model <- train (training , training$classe , method="gmb" , tuneGrid=grid)
library(caret)
library("caret", lib.loc="C:/Users/Blas/Documents/R/win-library/3.1")
library("caret")
install.packages("BradleyTerry2")
install.packages("caret")
library("caret")
library(caret)
install.packages("caret")
install.packages("caret")
model <- train (training , training$classe , method="gmb" , tuneGrid=grid)
data <- read.csv("pml-training.csv",  na.strings = "NA", stringsAsFactors = FALSE)
columns <- c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x",
"magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm",
"gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z",
"magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell",
"yaw_dumbbell", "total_accel_dumbbell", "gyros_dumbbell_x", "gyros_dumbbell_y",
"gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z",
"magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z", "roll_forearm",
"pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x", "gyros_forearm_y",
"gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z", "magnet_forearm_x",
"magnet_forearm_y", "magnet_forearm_z")
columns <- columns [!columns %in% c("roll_belt")]
training <- data [, columns]
library(caret)
library(gbm)
suppressPackageStartupMessages
suppressPackageStartupMessages()
suppressPackageStartupMessages
inTrain <- createDataPartition(data$classe, p=0.60 , list=FALSE)
model <- train (training[inTrain], data$classe[inTrain], method="gbm" , verbose=FALSE)
set.seed(1)
inTrain <- createDataPartition(data$classe, p=0.60 , list=FALSE)
model <- train (training[inTrain], data$classe[inTrain], method="gbm" , verbose=FALSE)
warnings()
grid <- data.frame(interaction.depth = 4, n.trees = 300, shrinkage = 0.1)
model <- train (training[inTrain], data$classe[inTrain], method="gbm" , verbose=FALSE, tuneGrid=grid)
grid <- data.frame(interaction.depth = 2, n.trees = 100, shrinkage = 0.1)
model <- train (training[inTrain], data$classe[inTrain], method="gbm" , verbose=FALSE, tuneGrid=grid)
model <- train (training[inTrain], data$classe[inTrain], method="lm")
mytraining <- training[inTrain]
mytraining <- training[inTrain,]
mytesting <- training[-inTrain]
mytesting <- training[-inTrain,]
y <- data$classe[inTrain,]
y <- data[inTrain,]$classe
model <- train (mytraining, y, method="lm", verbose=FALSE)
model <- train (mytraining, y , method="gbm" , verbose=FALSE, tuneGrid=grid)
install.packages("randomForest")
install.packages("randomForest")
data <- read.csv("pml-training.csv",  na.strings = "NA", stringsAsFactors = FALSE)
columns <- c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x",
"magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm",
"gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z",
"magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell",
"yaw_dumbbell", "total_accel_dumbbell", "gyros_dumbbell_x", "gyros_dumbbell_y",
"gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z",
"magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z", "roll_forearm",
"pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x", "gyros_forearm_y",
"gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z", "magnet_forearm_x",
"magnet_forearm_y", "magnet_forearm_z")
training <- data [, columns]
correlation <- cor(training)
highCorr <- findCorrelation( correlation, 0.90)
columns <- columns [-highCorr]
library("caret")
which(abs(correlation) > 0.90 & abs(correlation) < 1)
highCorr <- findCorrelation( correlation, 0.90)
columns <- columns [-highCorr]
training <- data [, c(columns,"classe")]
control <- trainControl(method = "cv", number = 5)
tune <- expand.grid(.interaction.depth = 10, .n.trees = 100, .shrinkage = 0.1)
model <- train ( classe ~ ., data=training , method="gbm" , tuneGrid=tune, trControl = control, verbose=FALSE)
set options(error=recover)
set.options(error=recover)
tune <- expand.grid(.interaction.depth = 4, .n.trees = 100, .shrinkage = 0.1)
model <- train ( classe ~ ., data=training , method="gbm" , tuneGrid=tune, trControl = control, verbose=FALSE)
control <- trainControl(method = "none")
model <- train ( classe ~ ., data=training , method="gbm" , tuneGrid=tune, trControl = control, verbose=FALSE)
model
model$confusion
prediction <- predict (model, newdata = )
testing <- read.csv("pml-testing.csv",  na.strings = "NA",  stringsAsFactors = FALSE)
prediction <- predict (model, newdata = testing[, columns] )
prediction
ConfusionMatrix <- confusionMatrix(prediction, training$classe)
InTraining <- createDataPartition(training$classe, p = 0.8, list = FALSE)
MyTraining <- training [InTraining]
MyTraining <- training [InTraining,]
MyTesting <- training[-InTraining]
MyTesting <- training[-InTraining,]
model <- train ( classe ~ ., data=MyTraining , method="gbm" , tuneGrid=tune, trControl = control, verbose=FALSE)
prediction <- predict (model, newdata = testing[, columns] )
prediction
confusionMatrix ( prediction , MyTesting$classe)
prediction <- predict (model, newdata = MyTesting[, columns] )
confusionMatrix ( prediction , MyTesting$classe)
confMatrix <- confusionMatrix ( prediction , MyTesting$classe)
confMatrix
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers <- predict (model, newdata = testing [, columns] )
answers
pml_write_files(answers)
